% 清空环境变量
clc
clear
% 
%% 网络结构建立
%读取数据
data=xlsread('focus2.xlsx');

%节点个数
inputnum=2;
hiddennum=11;
outputnum=1;
data_train=data(79:3378,1:3); 
data_test=data(1:78,1:3);

input_train=data_train(:,2:3)';
output_train=data_train(:,1)';

input_test=data_test(:,2:3)';
output_test=data_test(:,1)';
%%[inputn,mininput,maxinput,outputn,minoutput,maxoutput]=premnmx(input_train,output_train); %对p和t进行字标准化预处理 
[inputn,inputps]=mapminmax(input_train);
[outputn,outputps]=mapminmax(output_train);
net=newff(minmax(inputn),[11,1],{'tansig','purelin'},'trainlm');

%训练数据和预测数据
%%input_train=input(1:1900,:)';
%%input_test=input(1901:2000,:)';
%%output_train=output(1:1900)';
%%output_test=output(1901:2000)';

%选连样本输入输出数据归一化
%%[inputn,inputps]=mapminmax(input_train);
%%[outputn,outputps]=mapminmax(output_train);

%构建网络
%%net=newff(inputn,outputn,hiddennum);

%% 遗传算法参数初始化
maxgen=100;                         %进化代数，即迭代次数
sizepop=50;                        %种群规模
pcross=0.9;                       %交叉概率选择，0和1之间
pmutation=0.1;                    %变异概率选择，0和1之间

%节点总数
numsum=inputnum*hiddennum+hiddennum+hiddennum*outputnum+outputnum;

lenchrom=ones(1,numsum);        
bound=[-5*ones(numsum,1) 5*ones(numsum,1)];    %数据范围

%------------------------------------------------------种群初始化--------------------------------------------------------
individuals=struct('fitness',zeros(1,sizepop), 'chrom',[]);  %将种群信息定义为一个结构体
avgfitness=[];                      %每一代种群的平均适应度
bestfitness=[];                     %每一代种群的最佳适应度
bestchrom=[];                       %适应度最好的染色体

%初始化种群
for i=1:sizepop
    %随机产生一个种群
    individuals.chrom(i,:)=Code(lenchrom,bound);    %编码（binary和grey的编码结果为一个实数，float的编码结果为一个实数向量）
    x=individuals.chrom(i,:);
    %计算适应度
    [individuals.fitness(i),hh]=fun(x,inputnum,hiddennum,outputnum,net,inputn,outputn); %染色体的适应度
end

%找最好的染色体
[bestfitness, bestindex]=max(individuals.fitness);
bestchrom=individuals.chrom(bestindex,:);  %最好的染色体
avgfitness=sum(individuals.fitness)/sizepop; %染色体的平均适应度
% 记录每一代进化中最好的适应度和平均适应度
trace=[avgfitness bestfitness]; 
 
%% 迭代求解最佳初始阀值和权值
% 进化开始
for i=1:maxgen
    
    % 选择
    individuals=Select(individuals,sizepop); 
    avgfitness=sum(individuals.fitness)/sizepop;
    %交叉
    individuals.chrom=Cross(pcross,lenchrom,individuals.chrom,sizepop,bound);
    % 变异
    individuals.chrom=Mutation(pmutation,lenchrom,individuals.chrom,sizepop,i,maxgen,bound);
    
    % 计算适应度 
    for j=1:sizepop
        x=individuals.chrom(j,:); %解码
        [individuals.fitness(j),cc(j)]=fun(x,inputnum,hiddennum,outputnum,net,inputn,outputn);   
    end
    sum_squreerror(i)=sum(cc);
    
  %找到最小和最大适应度的染色体及它们在种群中的位置
    [newbestfitness,newbestindex]=max(individuals.fitness);
    [worestfitness,worestindex]=min(individuals.fitness);
    % 代替上一次进化中最好的染色体
    if bestfitness<newbestfitness
        bestfitness=newbestfitness;
        bestchrom=individuals.chrom(newbestindex,:);
    end
    individuals.chrom(worestindex,:)=bestchrom;
    individuals.fitness(worestindex)=bestfitness;
    
    avgfitness=sum(individuals.fitness)/sizepop;
    aa(i)=avgfitness;
    bb(i)=bestfitness;
    trace=[trace;avgfitness bestfitness]; %记录每一代进化中最好的适应度和平均适应度

end
%% 遗传算法结果分析 
 figure(1)
%%[r, c]=size(trace);
%%plot([1:r]',trace(:,2),'b--');
%%plot(aa,'b--');
%%hold on
%% 遗传算法结果分析 
plot(aa,'b+');
hold on
plot(bb,'r-');
title(['适应度曲线  ' '终止代数＝' num2str(maxgen)]);
xlabel('进化代数');ylabel('适应度');
legend('平均适应度','最佳适应度');
figure(2)
plot(1./aa,'b+');
hold on
plot(1./bb,'r-');
xlabel('进化代数');ylabel('GA-BP误差平方和');
legend('平均误差平方和','最小误差平方和');
x=bestchrom;

%% 把最优初始阀值权值赋予网络预测
% %用遗传算法优化的BP网络进行值预测
w1=x(1:inputnum*hiddennum);
B1=x(inputnum*hiddennum+1:inputnum*hiddennum+hiddennum);
w2=x(inputnum*hiddennum+hiddennum+1:inputnum*hiddennum+hiddennum+hiddennum*outputnum);
B2=x(inputnum*hiddennum+hiddennum+hiddennum*outputnum+1:inputnum*hiddennum+hiddennum+hiddennum*outputnum+outputnum);

net.iw{1,1}=reshape(w1,hiddennum,inputnum);
net.lw{2,1}=reshape(w2,outputnum,hiddennum);
net.b{1}=reshape(B1,hiddennum,1);
net.b{2}=B2;

%% BP网络训练
%网络进化参数
net.trainParam.epochs=1000;
net.trainParam.lr=0.1;
net.trainParam.goal=0.001;

%网络训练
[net,per2]=train(net,inputn,outputn);

%% BP网络预测
%数据归一化
inputn_test=mapminmax('apply',input_test,inputps);
an=sim(net,inputn_test);
test_simu=mapminmax('reverse',an,outputps);


Yn=test_simu;                 
figure(3)                        %绘图
plot(Yn,'r*-')                %绘制预测值曲线
hold on                       %继续绘图
plot(output_test,'bo')                  %实际值曲线
legend('预测值','实际值')      %图例

xx=0;

    for j=1:1:78
    if abs(output_test(j)-Yn(j))<2
      xx=xx+1;        
    end   
end
k=xx/78;
disp(k);


